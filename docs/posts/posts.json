[
  {
    "path": "posts/cyclistic/",
    "title": "Cyclistic - Comparing members vs casual users",
    "description": "Looking for time-based, geographic and product-specific differences between members and casual users using public bikes in Chicago",
    "author": [
      {
        "name": "Eric Narro",
        "url": "https://enarroied.github.io"
      }
    ],
    "date": "2022-04-30",
    "categories": [
      "R",
      "maps"
    ],
    "contents": "\n\nContents\nbusiness\ntask\nData source : Cyclistic’s\ndataset\nOriginal data location\nProject data\n\nData License\nMetadata\nData credibility\nobservations\n\nData\nprocessing\nStations\ndataset\nPreparing and cleaning\nmonthly files\nCreate final\nfile\n\nData Analysis and\nvisualizations\nGeneral description of the\ndataset\nMain descriptive\nstatistics\nImportant Dataset elements\n\nMember users and\ncasual users main differences\nTime-based\ndifferences between members and casual users\nUse of bikes per week day\n\nUse of bikes per month\nUse of service per hour of\nthe day\nLength of use of the\nservice\nGeographic\ndifferences between members and casual users\nRide distance\nRides of\ndistance 0\nMost popular starting\nstations\nRides by\nfrequence\n\n\nProduct\nspecific differences between members and casual users\n\n\nConclusion\nMain Findings and guesses\nMain\nsuggestions\n\n\nThis case study is the final project (capstone) of the Google\nAnalytics Coursera course.\nThis are the libraries required for the report:\n\n\nShow code\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif(!require(\"lubridate\")) install.packages(\"lubridate\")\nif(!require(\"geosphere\")) install.packages(\"geosphere\")\nif(!require(\"summarytools\")) install.packages(\"summarytools\")\nif(!require(\"ggplot2\")) install.packages(\"ggplot2\")\nif(!require(\"osmdata\")) install.packages(\"osmdata\")\nif(!require(\"sf\")) install.packages(\"sf\")\nif(!require(\"ggmap\")) install.packages(\"ggmap\")\nif(!require(\"rgdal\")) install.packages(\"rgdal\")\nif(!require(\"ggspatial\")) install.packages(\"ggspatial\")\n\nlibrary(\"tidyverse\")\nlibrary(\"lubridate\")\nlibrary(\"geosphere\")\n#https://dabblingwithdata.wordpress.com/2017/12/20/my-favourite-r-package-for-frequency-tables/\n#https://github.com/dcomtois/summarytools\n#install.packages(\"summarytools\")\nlibrary(\"summarytools\")\nlibrary(\"ggplot2\")\nlibrary(\"osmdata\")\nlibrary(\"sf\")\nlibrary(\"ggmap\")\nlibrary(\"rgdal\")\nlibrary(\"ggspatial\")\n\n\n\nbusiness task\nThis report shows insights about the following question:\nAre there time-based, geographic or\nproduct-specific differences in the the rides\ndone by member users and the ones done by casual users?\nData source : Cyclistic’s\ndataset\nThe main data source used for this task is internal Cyclistic data\nabout rides of the past year.\nOriginal data location\nData can be downloaded from the following URL : https://divvy-tripdata.s3.amazonaws.com/index.html\nThe following table contains every dataset (click to download), along\nwith their publication date and size.\nName\nDate Modified\nSize\nType\n202104-divvy-tripdata.zip\nMay 7th 2021, 04:52:05 pm\n11.78 MB\nZIP file\n202105-divvy-tripdata.zip\nJun 11th 2021, 07:10:18 pm\n18.89 MB\nZIP file\n202106-divvy-tripdata.zip\nJul 16th 2021, 01:22:05 am\n26.52 MB\nZIP file\n202107-divvy-tripdata.zip\nAug 14th 2021, 08:06:49 am\n29.68 MB\nZIP file\n202108-divvy-tripdata.zip\nSep 8th 2021, 08:10:46 pm\n27.88 MB\nZIP file\n202109-divvy-tripdata.zip\nOct 4th 2021, 07:21:39 pm\n27.48 MB\nZIP file\n202110-divvy-tripdata.zip\nNov 4th 2021, 08:58:36 pm\n23.01 MB\nZIP file\n202111-divvy-tripdata.zip\nDec 8th 2021, 09:19:04 pm\n13.82 MB\nZIP file\n202112-divvy-tripdata.zip\nJan 6th 2022, 05:18:45 pm\n9.33 MB\nZIP file\n202201-divvy-tripdata.zip\nFeb 2nd 2022, 05:55:22 pm\n3.84 MB\nZIP file\n202202-divvy-tripdata.zip\nMar 2nd 2022, 09:22:47 pm\n4.30 MB\nZIP file\n202203-divvy-tripdata.zip\nApr 6th 2022, 07:07:41 pm\n10.39 MB\nZIP file\nProject data\nAll the data used for this project is stored in the Data folder of\nthe 2022-04-18_members-casual-differences, following all company’s\nguidelines.\nData License\nOriginal dataset is published under the following license : https://ride.divvybikes.com/data-license-agreement\nMetadata\nThe datasets for the period March 2021 – March 2022\nare provided per month, as CSV files, and can be downloaded from the web\npage in compressed (zip) format. Original datasets are provided without\nmetadata.\nHowever, using intuition and after checking the metadata provided in\nthe file “Divvy_Stations_Trips_2013” we were able to figure out the\nfollowing :\nVariables\nDescription\nride_id\nID attached to each trip taken\nrideable_type\nType of bike taken\nstarted_at\nDay and time trip started, in CST\nended_at\nDay and time trip ended, in CST\nstart_station_name\nName of station where trip originated\nstart_station_id\nID of station where trip originated\nend_station_name\nName of station where trip terminated\nend_station_id\nID of station where trip terminated\nstart_lat\nLatitude of of station where trip originated\nstart_lng\nLongitude of station where trip originated\nend_lat\nLatitude of station where trip terminated\nend_long\nLongitude of station where trip terminated\nmember_casual\nType of user. Member has a yearly subscription and casual does\nnot\nData credibility\nobservations\nData reliability and possible bias:\nData reflects trips, it does not identify users, so we can not know\nhow many individuals use the service several times. For example, “how\nmany ‘casual’ users use the service X times a month”, is a question we\ncan not answer.\n\nData origin:\nData comes from Cyclistic’s internal source, 1st party\ninformation\n\nData is comprehensive:\nSome information is missing or has problems (some coordinates are\nwrong and there is a few rides with abnormal lengths -even negative\nlengths-)\n\nData is current:\nIt includes past 12 month at time of analysis\nCovid-19 may have altered riders’ behavior, so this has to be taken\ninto account when interpreting results\n\n*Data is vetted : + This data comes from our data engineers team and\nthat it has been vetted\nData processing\nThere are 12 files to clean, totaling 1.1 Gb. The description of the\nfiles is in the metadata section.\nGoogle Analytics capstone exercise states that part of the data\npreparation and data cleaning process has to be done solely with\nspreadsheets. LibreOffice Calc and Google Spreadsheets were used but the\nfiles are just too heavy. The course has now a few years of existence\nand this may be due to the fact that some files group the information by\nquarters (instead of by month) and are lighter. Anyhow, we want the\ninformation of the last 12 month, so we decided to go with the bigger\nfiles, which impose using other tools and we chose processing with R.\nSpreadsheets were still used to have a general overview of the dataset\nand of the outcomes of the processing.\nWe proceeded in 3 steps :\nCreate a Stations dataset, with name, id number, latitude and\nlongitude for each station\nCreate 12 separated cleaned files, for each month\nMerging all the datasets into a single one\nHaving a separated stations dataset helps us reduce the weight of the\nmain file while keeping a unique ID number for the stations but removing\nthe stations names (using SQL JOINS or other method). It also creates a\nlight file with all the stations and coordinates for eventual\ncartography.\nStations dataset\nFor the stations dataset, we loop through all the stations\n(end_station and start_station) of all the files, to make sure that we\nhave all the stations in the global dataset.\n\n\nShow code\n\nfile_names <- list.files(path=\"files_to_clean\",pattern=\"*.csv\")\ndf_stations = data.frame(id_original=\"\", name=\"\", lat=0.0, lng=0.0)\n\n\n\nAfter the file is created and we have specified which files to loop\nthrough, we create a data frame with all the stations. The following\nsteps avoid using too much memory (it takes a couple minutes):\n\n\nShow code\n\n#for rename function\nfor(file in file_names){\n  df_trips <- read.csv(paste(\"files_to_clean/\", file, sep=\"\"))\n\n  df_stations1 <-df_trips[c(\"start_station_id\", \"start_station_name\", \"start_lat\", \"start_lng\")]\n  df_stations2 <-df_trips[c(\"end_station_id\", \"end_station_name\", \"end_lat\", \"end_lng\")]\n  \n  df_stations1 <- rename(df_stations1, id_original = start_station_id, name = start_station_name, lat = start_lat, lng = start_lng)\n  df_stations2 <- rename(df_stations2, id_original = end_station_id, name = end_station_name, lat = end_lat, lng = end_lng)\n  \n  df_stations1<- rbind(df_stations1, df_stations2)\n  df_stations<- rbind(df_stations, df_stations1)\n  #make some space\n  rm(df_stations1, df_stations2)\n  #We keep unique combinations, but this does not give one row per id since long and lat info is too precise. We do this at the end of each loop to avoid huge files\n  df_stations <- unique(df_stations[c(\"id_original\", \"name\", \"lat\", \"lng\")])\n}\n\n\n\nThis generates a moderately big data frame (about 235 Mb), but it has\nmany repeated stations. Now we will sort it and keep only unique values\nfor stations. Latitude and longitude values will be calculated as a mean\nof all the values. This is arbitrary. Latitude and Longitude values come\nfrom GPS data from the bikes, which can be parked within a small area\nwith slightly different coordinates, in the same stations (few meters\naway).\n\n\nShow code\n\n#We order by id\ndf_stations <- df_stations[order(df_stations$id_original), ]\n#Get the mean for both latitude and longitude\ndf_stations_lat <- aggregate(df_stations$lat, list(df_stations$id_original, df_stations$name), FUN=mean)\ndf_stations_lng <- aggregate(df_stations$lng, list(df_stations$id_original, df_stations$name), FUN=mean)\n#Append the info to df_stations df\ndf_stations <- data.frame(id_original = df_stations_lat$Group.1, name = df_stations_lat$Group.2, lat = df_stations_lat$x, lng = df_stations_lng$x)\n#Remove row where id is empty\n#inspired from https://www.statology.org/remove-rows-in-r/\ndf_stations <- df_stations[-c(1),] \n#We order by id\ndf_stations <- df_stations[order(df_stations$id), ]\n#Remove duplicates\ndf_stations <- df_stations %>%\n  distinct(id_original, .keep_all = TRUE)\n\n\n\nThis creates a much smaller data frame (148 kb). We now save as\n‘stations.csv’ and clean the environment.\n\n\nShow code\n\n#we wrtite the file for further use\nwrite.csv(df_stations, \"stations.csv\", row.names = FALSE)\n#empty environment (found : https://koalatea.io/r-remove-variables/)\nrm(list = ls())\n\n\n\nAfter checking with a spreadsheet, we have stations which are\nobviously repair, charging or test stations. Since trip to and from\nthose stations do not involve customers, we will delete those rows in\nthe next section. Here is the list of those IDs:\nBissell St & Armitage Ave - Charging\nDIVVY 001\nDIVVY CASSETTE REPAIR MOBILE STATION\nLincoln Ave & Roscoe St - Charging\nPawel Bialowas - Test- PBSC charging station\nThroop/Hastings Mobile Station\nWilton Ave & Diversey Pkwy - Charging\nPreparing and cleaning\nmonthly files\nSince there are 12 files, we loop through all of them and apply the\nfunction created below. Here is a brief summary of steps taken by the\nfunction :\nCreate a data frame from the original csv file\nRemove trip id ; remove station names for both start and\nend: id is not needed for the analysis (and we could always\ntrace back the information ir really required). Station names are kept\nin the stations.csv file (and we can link both datasets with station\nIDs). This allows to remove noise and have a smaller dataset.\nOrder by date: We order dataset by date and time\n(of the starting point of the ride).\nRemove duplicated rows.\nRemove rows with NA values.\nRename type of bike: Electric is renamed e, docked\nis renamed d and classic is renamed c. This is only to gain some\nspace\nRename member column: The column “member_casual” is\nrenamed to “member”, and the values “casual” are renamed “N” (for\nNO) and values “member” are renamed “Y” (for YES). This is\nto gain space.\nErase rows with non-customer trips: Some stations\nare repair or test stations (view section above), we remove them since\nthey should not involve customers.\nAdd ride length (in seconds): We add a column,\nride_length, to the dataset, with the duration (in seconds) of the trip.\nNote that a customer may not have been riding the bike during the full\ntime he has been renting it. Also note that not all customers ride as\nfast.\nRemove rides with abnormal length: Some data comes\nwith trips that “ended before the started”, or duration of 0 seconds.\nSome trips have duration of very few seconds. We have removed trips of\nless than 1 minute. We also remove trips that lasted over a day, since\nthey are probably stolen bikes or some other kind of technical\nproblem.\nAdd ride distance (in meters): We add the distance\nbetween the starting and the end point of the ride. Note that this is\nthe shortest distance between points, it does not reflect at all the\nreal distance the customer rides.\nMake day of the week column: We create a column\nwith the day of the week, for further analysis.\nMake month column: We create a column with the\nmonth for further analysis.\nMake hour column: We create a column with the hour\nof the day (of the starting point) for further analysis\nRemove end date: We remove the end date time, which\nis not needed for analysis and since we have already calculated trip\nduration\nThe code:\n\n\nShow code\n\nclean_trip_files <- function(file){\n  read_file_path <- paste(\"files_to_clean/\", file, sep = \"\")\n  df_trips <- read.csv(read_file_path)\n  #Order dataset by started date time (started_at)\n  df_trips <- df_trips[order(df_trips$started_at), ]\n  #Remove some columns we do not need\n  df_trips <- df_trips[c(\"rideable_type\", \"started_at\", \"ended_at\", \"start_station_id\", \"end_station_id\", \"start_lat\", \"start_lng\", \"end_lat\", \"end_lng\", \"member_casual\")]\n  #Remove duplicates\n  df_trips <- df_trips[!duplicated(df_trips), ]\n  #Remove NA values\n  df_trips <- na.omit(df_trips)\n  \n  #Rename electric_bike to e, classic_bike to c and docked_bike to d\n  #inspired from https://stackoverflow.com/questions/43108310/how-to-rename-a-specific-cell-in-r\n  df_trips$rideable_type <- gsub(\"electric_bike\", \"e\", df_trips$rideable_type)\n  df_trips$rideable_type <- gsub(\"classic_bike\", \"c\", df_trips$rideable_type)\n  df_trips$rideable_type <- gsub(\"docked_bike\", \"d\", df_trips$rideable_type)\n  \n  #Rename member_casual column to member, then create boolean datatype Y/N\n  df_trips <- rename(df_trips, member = member_casual)\n  df_trips$member <- gsub(\"member\", \"Y\", df_trips$member)\n  df_trips$member <- gsub(\"casual\", \"N\", df_trips$member)\n  \n  #Remove rows with repair stations in it\n  list_repair <- list(\"Bissell St & Armitage Ave - Charging\", \"DIVVY 001\", \"DIVVY CASSETTE REPAIR MOBILE STATION\", \"Lincoln Ave & Roscoe St - Charging\", \"Pawel Bialowas - Test- PBSC charging station\", \"Throop/Hastings Mobile Station\", \"Wilton Ave & Diversey Pkwy - Charging\")\n  for (trip_row in 1:nrow(df_trips)){\n    if(df_trips[trip_row,4] %in% list_repair){\n      df_trips <- df_trips[-c(trip_row),]\n    }\n    else if(df_trips[trip_row,5] %in% list_repair){\n      df_trips <- df_trips[-c(trip_row),]\n    }\n  }\n  # add ride_length column to the dataset\n  df_trips <-  transform(df_trips, ride_length = ymd_hms(ended_at) - ymd_hms(started_at))\n  #Remove trips under a minute (or with 0 second or even negative values) and over a day\n  df_trips <- subset(df_trips, ride_length > 60)\n  df_trips <- subset(df_trips, ride_length < 86400)\n  #add ride_distance to the dataset\n  #Inspiration from : https://www.rdocumentation.org/packages/geosphere/versions/1.5-14/topics/distHaversine\n  df_trips <-  transform(df_trips, ride_distance = distHaversine(df_trips[7:6], df_trips[9:8]))\n \n  #Get info from the day (reference is start_time, arbitrary)\n  df_trips <- transform(df_trips, week_day = as.character(wday(df_trips$started_at, label = TRUE)))\n  df_trips <- transform(df_trips, month = as.character(month(df_trips$started_at, label = TRUE)))\n  df_trips <- transform(df_trips, hour = as.character(hour(df_trips$started_at)))\n  \n  #remove end datetime, we keep start to further analyze, arbitrary choice\n  df_trips <- df_trips[c(\"rideable_type\", \"month\", \"started_at\", \"week_day\", \"hour\", \"start_station_id\", \"end_station_id\", \"start_lat\", \"start_lng\", \"end_lat\", \"end_lng\", \"member\", \"ride_length\", \"ride_distance\")]\n  write_file_path <- paste(\"clean_files/\", file, sep = \"\")\n  write.csv(df_trips, write_file_path, row.names = FALSE)\n}\n\n\n\nAnd then, we execute the function for each file to clean.\n\n\nShow code\n\n#Clean all the files using file_names function\nfile_names <- list.files(path=\"files_to_clean\",pattern=\"*.csv\")\nfor (file in file_names){\n  clean_trip_files(file)\n}\n\n\n\nCreate final file\nFinaly, we merge all the datasets into a single one for further\nanalysis.\n\n\nShow code\n\nclean_file_names <- list.files(path=\"clean_files\",pattern=\"*.csv\", full.names = TRUE)\n#Merge all clean files into 1 single dataframe (forgot to copy the source, found online...)\ndf_cyclistic <- do.call(\"rbind\",lapply(clean_file_names,FUN=function(clean_file_names){ read.csv(clean_file_names)}))\n#write into file\nwrite.csv(df_cyclistic, \"df_cyclistic.csv\", row.names = FALSE)\n\n\n\nThe resulting file is “df_cyclistic.csv”, it is a 748 Mb file, so we\nwill not be able to use Google Cloud Bigquery Sandbox service because it\nis limited to 100Mb file upload (and our $0 budget does not allow us to\nupgrade to load bigger files). Using spreadsheets is also impossible\nwith a file this big.\nThe size of the file is somehow “medium” and we can use R (we can\ncreate smaller data frames with not all the columns at once) or use a\nsmall database service like SQLite, that will run locally.\nData Analysis and\nvisualizations\nGeneral description of the\ndataset\nMain descriptive statistics\nFirst, we load the libraries we need. We also define a function to\nget the mode of our values.\n\n\nShow code\n\n#R does not have in-built function for mode, but here we found it: https://www.tutorialspoint.com/r/r_mean_median_mode.htm#:~:text=The%20mode%20is%20the%20value,a%20data%20set%20in%20R.\ngetmode <- function(v) {\n  uniqv <- unique(v)\n  uniqv[which.max(tabulate(match(v, uniqv)))]\n}\n\n\n\nThen, we load the main datasets.\n\n\nShow code\n\ndf_trips <- read.csv(\"df_cyclistic.csv\")\ndf_stations <- read.csv(\"stations.csv\")\n\n#Turn categorical variables into factor\ndf_trips$rideable_type <- factor(df_trips$rideable_type, levels = c(\"c\",\"e\",\"d\"))\ndf_trips$rideable_type <- recode_factor(df_trips$rideable_type, \"c\" = \"Classic\" , \"e\" = \"Electric\", \"d\" = \"Docked\")\ndf_trips$week_day <- factor(df_trips$week_day, levels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"))\ndf_trips$month <- factor(df_trips$month, levels = c(\"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\", \"Mar\"))\ndf_trips$hour <- factor(as.character(df_trips$hour), levels = c(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\"))\ndf_trips$member <- factor(df_trips$member, levels = list(\"Y\", \"N\"))\ndf_trips$member <- recode_factor(df_trips$member, \"Y\" = \"Member User\" , \"N\" = \"Casual User\")\ndf_trips <- rename(df_trips, user = member)\n\n\n\nHere is the table structure:\n\n\nShow code\n\nglimpse(df_trips)\n\n\nRows: 5,626,694\nColumns: 14\n$ rideable_type    <fct> Electric, Classic, Electric, Classic, Elect…\n$ month            <fct> Apr, Apr, Apr, Apr, Apr, Apr, Apr, Apr, Apr…\n$ started_at       <chr> \"2021-04-01 00:03:18\", \"2021-04-01 00:03:47…\n$ week_day         <fct> Thu, Thu, Thu, Thu, Thu, Thu, Thu, Thu, Thu…\n$ hour             <fct> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ start_station_id <chr> \"527\", \"13430\", \"\", \"TA1307000131\", \"KA1504…\n$ end_station_id   <chr> \"15648\", \"TA1308000026\", \"\", \"13045\", \"TA13…\n$ start_lat        <dbl> 42.01888, 41.89076, 41.72000, 41.88688, 41.…\n$ start_lng        <dbl> -87.69008, -87.63170, -87.62000, -87.62603,…\n$ end_lat          <dbl> 41.92465, 41.85008, 41.70000, 41.89399, 41.…\n$ end_lng          <dbl> -87.68929, -87.63214, -87.65000, -87.62932,…\n$ user             <fct> Member User, Member User, Member User, Memb…\n$ ride_length      <int> 1661, 1179, 1292, 570, 1052, 478, 558, 672,…\n$ ride_distance    <dbl> 10490.4741, 4528.4376, 3342.4883, 837.8058,…\n\nThen, we get the main descriptive statistics summary for the\ndataset.\n\n\nShow code\n\nprint(dfSummary(df_trips, \n          plain.ascii  = FALSE, \n          style        = \"grid\", \n          graph.magnif = 0.75, \n          valid.col    = FALSE,\n          missing.col=FALSE,\n          tmp.img.dir  = \"/tmp\",\n          max.distinct.values = 12),\n      method = 'render')\n\n\n\nData Frame Summary\ndf_trips\nDimensions: 5626694 x 14\n  Duplicates: 0\nNo\n      Variable\n      Stats / Values\n      Freqs (% of Valid)\n      Graph\n      Missing\n    1\n      rideable_type\n[factor]\n      1. Classic2. Electric3. Docked\n      3202902(56.9%)2123408(37.7%)300384(5.3%)\n      \n      0\n(0.0%)\n    2\n      month\n[factor]\n      1. Apr2. May3. Jun4. Jul5. Aug6. Sep7. Oct8. Nov9. Dec10. Jan11. Feb12. Mar\n      331985(5.9%)522434(9.3%)716553(12.7%)808596(14.4%)791915(14.1%)744297(13.2%)620545(11.0%)353757(6.3%)243394(4.3%)101793(1.8%)112926(2.0%)278499(4.9%)\n      \n      0\n(0.0%)\n    3\n      started_at\n[character]\n      1. 2021-06-11 18:22:142. 2021-06-12 14:10:363. 2021-06-13 14:00:414. 2021-06-17 18:14:525. 2021-06-23 17:11:186. 2021-06-23 17:27:097. 2021-06-27 16:07:538. 2021-07-03 16:03:029. 2021-07-08 18:35:0510. 2021-07-16 16:59:5711. 2021-07-19 17:36:4812. 2021-07-20 17:20:15[ 4724820 others ]\n      7(0.0%)7(0.0%)7(0.0%)7(0.0%)7(0.0%)7(0.0%)7(0.0%)7(0.0%)7(0.0%)7(0.0%)7(0.0%)7(0.0%)5626610(100.0%)\n      \n      0\n(0.0%)\n    4\n      week_day\n[factor]\n      1. Mon2. Tue3. Wed4. Thu5. Fri6. Sat7. Sun\n      720130(12.8%)754044(13.4%)773271(13.7%)756527(13.4%)803537(14.3%)964159(17.1%)855026(15.2%)\n      \n      0\n(0.0%)\n    5\n      hour\n[factor]\n      1. 02. 13. 24. 35. 46. 57. 68. 79. 810. 911. 1012. 11[ 12 others ]\n      86578(1.5%)60976(1.1%)38283(0.7%)21445(0.4%)18226(0.3%)43933(0.8%)109280(1.9%)203575(3.6%)246528(4.4%)210146(3.7%)233969(4.2%)290001(5.2%)4063754(72.2%)\n      \n      0\n(0.0%)\n    6\n      start_station_id\n[character]\n      1. (Empty string)2. 130223. LF-0054. 133005. 130426. TA13080000507. 130088. TA13070000399. KA150400013510. TA130800000111. KA150300004312. 13179[ 834 others ]\n      722758(12.8%)82624(1.5%)46982(0.8%)44875(0.8%)43582(0.8%)43489(0.8%)41551(0.7%)40667(0.7%)37409(0.7%)35888(0.6%)34767(0.6%)32831(0.6%)4419271(78.5%)\n      \n      0\n(0.0%)\n    7\n      end_station_id\n[character]\n      1. (Empty string)2. 130223. LF-0054. 130425. TA13080000506. 133007. 130088. TA13070000399. KA150400013510. TA130800000111. KA150300004312. TA1307000117[ 834 others ]\n      764727(13.6%)83495(1.5%)53123(0.9%)44036(0.8%)43629(0.8%)43166(0.8%)42341(0.8%)39972(0.7%)37081(0.7%)36063(0.6%)33960(0.6%)33023(0.6%)4372078(77.7%)\n      \n      0\n(0.0%)\n    8\n      start_lat\n[numeric]\n      Mean (sd) : 41.9 (0)min ≤ med ≤ max:41.6 ≤ 41.9 ≤ 42.1IQR (CV) : 0 (0)\n      430262 distinct values\n      \n      0\n(0.0%)\n    9\n      start_lng\n[numeric]\n      Mean (sd) : -87.6 (0)min ≤ med ≤ max:-87.8 ≤ -87.6 ≤ -87.5IQR (CV) : 0 (0)\n      409122 distinct values\n      \n      0\n(0.0%)\n    10\n      end_lat\n[numeric]\n      Mean (sd) : 41.9 (0)min ≤ med ≤ max:41.4 ≤ 41.9 ≤ 42.2IQR (CV) : 0 (0)\n      432742 distinct values\n      \n      0\n(0.0%)\n    11\n      end_lng\n[numeric]\n      Mean (sd) : -87.6 (0)min ≤ med ≤ max:-89 ≤ -87.6 ≤ -87.5IQR (CV) : 0 (0)\n      394293 distinct values\n      \n      0\n(0.0%)\n    12\n      user\n[factor]\n      1. Member User2. Casual User\n      3120822(55.5%)2505872(44.5%)\n      \n      0\n(0.0%)\n    13\n      ride_length\n[integer]\n      Mean (sd) : 1158.1 (2094.1)min ≤ med ≤ max:61 ≤ 715 ≤ 86391IQR (CV) : 884 (1.8)\n      23552 distinct values\n      \n      0\n(0.0%)\n    14\n      ride_distance\n[numeric]\n      Mean (sd) : 2209.6 (1967.2)min ≤ med ≤ max:0 ≤ 1649.3 ≤ 114511.7IQR (CV) : 1957.6 (0.9)\n      1742755 distinct values\n      \n      0\n(0.0%)\n    Generated by summarytools 1.0.0 (R version 4.2.0)2022-05-11\n\n\nWe also get the modes for some of the values:\n\n\nShow code\n\ncat(paste(\" mode of week days\\t:\", getmode(df_trips$week_day), \"\\n\",\n\"mode of hour of day\\t:\", getmode(df_trips$hour), \"\\n\",\n\"mode of month\\t\\t:\", getmode(df_trips$month), \"\\n\",\n\"mode of user type\\t:\", getmode(df_trips$user), \"\\n\",\n\"mode of bike type\\t:\", getmode(df_trips$rideable_type), \"\\n\",\n\"mode of duration\\t:\", getmode(df_trips$ride_length), \"\\n\",\n\"mode of distance\\t:\", getmode(df_trips$ride_distance), \"\\n\"))\n\n\n mode of week days  : Sat \n mode of hour of day    : 17 \n mode of month      : Jul \n mode of user type  : Member User \n mode of bike type  : Classic \n mode of duration   : 352 \n mode of distance   : 0 \n\nImportant Dataset elements\nThis dataset has over 5.6 Million observations for the last 12 months\n(April 2021 - March 2022). Main elements from this dataset are now\ndiscussed under the perspective of an actual service. As a reminder, we\nare trying identify the main differences between members and casual\nusers to increase the sales of memberships.\nNote : since this is a Google Anlytic’s course project, some\ninformation that should be easy to obtain in the context of actually\nworking for the company has been guessed using as much common sense as\npossible and of course looking at information from the real company that\nreleases the data (pricing, how the service actually works…). Their\nwebsite can be found here\nMembers make-up 55.5% of the rides and 45.5% are done by\ncasual users.The dataset does not identify users, so we do not\nknow how many members and casual riders use the service. In fact, we can\nimagine (but not prove) that there are more casual riders since\nmembers probably ride many times a year.\nClassic bikes make-up 56.9% of the rides. Docked bikes are electric\nbikes rented by casual users that probably do not have the phone app\ninstalled and have to rent the electric bike from a docking station and\nreturn it to another docking station. Electric bikes are more expensive\nthan classic bikes. Electric bikes do not have to be locked to a docking\nstation, so they allow more flexibility (as long as the app is used to\nrent the service).\nWeekends have more rides than week days, but the difference is not\nvery big. Weekday use varies between 12.8% on Mondays and 14.3% on\nFridays. In fact, Tuesdays, Wednesdays and Thursdays have almost the\nsame share of rides, while Mondays are visibly less popular days (-0.6%\ncompared to Tuesdays) and Fridays are a point above Thursdays, probably\nsince they are at the beginning of the weekend. Saturday(17.1%) and\nSunday (15.2%) are clearly more popular times, 32.3% of rides\nhappen on weekends. Despite the fact that some people work on\nweekends, a big part of the bike use on weekends is probably for leisure\npurpose (or to ride bike as a sport activity). It would be\ninteresting to know what kind of leisure riders seek.\nWhen we look a the most popular times to ride, we see that\nalmost 3/4 of the rides happen in second half of the\nday. This is important because probably a lot of the use made\nduring the weekdays are not for commuting to work (or school or any\nother weekday regular activity). Some users may use the service to\ncommute only to come back home after work, but then they would have to\nuse public transportation in the morning. Also, since this is an\naggregation of round-year data, some may use the service to commute only\nsome days (like when it does not rain, for example… or whenever they\nfeel like it).\nWhen we look at monthly data, we see that warmer months (Summer, late\nSpring and early Autumn) are way more popular than the colder months. A\nspecial mention has to be made towards January and February,\nboth accounting (together) for only 3.8% of the rides. This is\nboth not very surprising and very interesting: Chicago is a pretty cold\ncity in the winter, so probably not very well adapted for riding bikes\nduring winter days. This difficulty makes it also very hard for\na person to only rely on the bike system to commute to work and\nbecome THE number 1 option to commute. Also, having 2\nmonths out of 2 where it is difficult to ride could make a yearly\nsubscription less attractive, for all users.\nIf we take a closer look at the distribution of rides per day and per\nmonth, we see that during cold months, not only are there less rides in\ngeneral, but also the proportion of rides is less important during the\nweekends.\n\n\nShow code\n\nprint(ctable(df_trips$month, df_trips$week_day), method = \"render\")\n\n\n\nCross-Tabulation, Row Proportions\nmonth * week_day\nData Frame: df_trips\n\nweek_day\n\n\nmonth\n\nMon\nTue\nWed\nThu\nFri\nSat\nSun\nTotal\n\nApr\n\n43060\n(\n13.0%\n)\n51407\n(\n15.5%\n)\n36707\n(\n11.1%\n)\n39879\n(\n12.0%\n)\n57819\n(\n17.4%\n)\n53574\n(\n16.1%\n)\n49539\n(\n14.9%\n)\n331985\n(\n100.0%\n)\n\nMay\n\n74673\n(\n14.3%\n)\n51208\n(\n9.8%\n)\n61589\n(\n11.8%\n)\n57565\n(\n11.0%\n)\n65098\n(\n12.5%\n)\n109950\n(\n21.0%\n)\n102351\n(\n19.6%\n)\n522434\n(\n100.0%\n)\n\nJun\n\n77604\n(\n10.8%\n)\n107760\n(\n15.0%\n)\n111595\n(\n15.6%\n)\n89248\n(\n12.5%\n)\n98856\n(\n13.8%\n)\n119945\n(\n16.7%\n)\n111545\n(\n15.6%\n)\n716553\n(\n100.0%\n)\n\nJul\n\n93165\n(\n11.5%\n)\n96237\n(\n11.9%\n)\n98539\n(\n12.2%\n)\n119250\n(\n14.7%\n)\n133884\n(\n16.6%\n)\n160023\n(\n19.8%\n)\n107498\n(\n13.3%\n)\n808596\n(\n100.0%\n)\n\nAug\n\n108260\n(\n13.7%\n)\n109306\n(\n13.8%\n)\n90864\n(\n11.5%\n)\n100157\n(\n12.6%\n)\n109888\n(\n13.9%\n)\n132949\n(\n16.8%\n)\n140491\n(\n17.7%\n)\n791915\n(\n100.0%\n)\n\nSep\n\n91260\n(\n12.3%\n)\n82576\n(\n11.1%\n)\n113303\n(\n15.2%\n)\n120365\n(\n16.2%\n)\n101291\n(\n13.6%\n)\n122064\n(\n16.4%\n)\n113438\n(\n15.2%\n)\n744297\n(\n100.0%\n)\n\nOct\n\n62686\n(\n10.1%\n)\n83205\n(\n13.4%\n)\n83174\n(\n13.4%\n)\n68323\n(\n11.0%\n)\n97727\n(\n15.7%\n)\n126491\n(\n20.4%\n)\n98939\n(\n15.9%\n)\n620545\n(\n100.0%\n)\n\nNov\n\n58821\n(\n16.6%\n)\n66125\n(\n18.7%\n)\n52304\n(\n14.8%\n)\n41920\n(\n11.8%\n)\n42342\n(\n12.0%\n)\n49042\n(\n13.9%\n)\n43203\n(\n12.2%\n)\n353757\n(\n100.0%\n)\n\nDec\n\n29751\n(\n12.2%\n)\n27905\n(\n11.5%\n)\n44037\n(\n18.1%\n)\n47010\n(\n19.3%\n)\n41707\n(\n17.1%\n)\n29637\n(\n12.2%\n)\n23347\n(\n9.6%\n)\n243394\n(\n100.0%\n)\n\nJan\n\n15495\n(\n15.2%\n)\n15852\n(\n15.6%\n)\n14875\n(\n14.6%\n)\n16259\n(\n16.0%\n)\n13556\n(\n13.3%\n)\n14446\n(\n14.2%\n)\n11310\n(\n11.1%\n)\n101793\n(\n100.0%\n)\n\nFeb\n\n22370\n(\n19.8%\n)\n18705\n(\n16.6%\n)\n16674\n(\n14.8%\n)\n13208\n(\n11.7%\n)\n14287\n(\n12.7%\n)\n12164\n(\n10.8%\n)\n15518\n(\n13.7%\n)\n112926\n(\n100.0%\n)\n\nMar\n\n42985\n(\n15.4%\n)\n43758\n(\n15.7%\n)\n49610\n(\n17.8%\n)\n43343\n(\n15.6%\n)\n27082\n(\n9.7%\n)\n33874\n(\n12.2%\n)\n37847\n(\n13.6%\n)\n278499\n(\n100.0%\n)\n\nTotal\n\n720130\n(\n12.8%\n)\n754044\n(\n13.4%\n)\n773271\n(\n13.7%\n)\n756527\n(\n13.4%\n)\n803537\n(\n14.3%\n)\n964159\n(\n17.1%\n)\n855026\n(\n15.2%\n)\n5626694\n(\n100.0%\n)\nGenerated by summarytools 1.0.0 (R version 4.2.0)2022-05-11\n\n\nRide length varies a lot. Members have unlimited rides included in\ntheir plan as long as they do not exceed 45 mins. They then pay\n$0.16/min. Casual users pay $1 to access the service and then $0.16/min,\nfrom minute 1. The average ride is 19 minutes long while the median ride\nis about 12 minutes. Both values are way under 45 minutes.\nStarting and end points are usually docking stations, but about 13%\nof the time it is not-docked (electric) bikes. The most popular\ndocking station is by far “Streeter Dr & Grand Ave”,with\n1.5% of rides coming from it or going to it, and is a well known place\nfor leisure in Chicago. All other stations have a less than 1%\noccurrence.\nThe average ride distance is 2.2 km and the median ride\ndistance is 1.6 km, but let’s keep in mind that is the distance\nbetween start and end, not the distance really ride (and many rides have\na distance of 0 because they ended where they started…).\nDocking stations are mostly located in Chicago but also in the\nMetropolitan area, from Lincolnwood in the North to Riverdale in the\nSouth, stations are spread in a about 40 km range. The\nmap below shows all the stations from the dataset (in blue) and all the\nstations found via the Open Street Map (OSM) API (this has been done to\ncheck if the data from OSM seems reliable since we are going to use it\nfor further analysis). We can see that there is a high density\nof stations in Downtown Chicago and to the North, but that\ndensity is lower in the South. Density is also lower in the West\ncompared to the East, where new docking stations are being deployed (we\ncan see about of dozen docking stations around the town of Norridge have\nnot been added to OSM already).\nHere is the map:\n\n\nShow code\n\n#Data from our dataset, chicago stations\nsf_stations <- st_as_sf(df_stations,\n                                coords = c(\"lng\", \"lat\"),\n                                crs = 4326)\n\n#OSM stations data, to compare\nq_bikes <- getbb(\"Chicago\") %>%\n  opq() %>%\n  add_osm_feature(\"amenity\", \"bicycle_rental\")\n\nosm_bikes <- osmdata_sf(q_bikes)\n#https://stackoverflow.com/questions/61286108/error-in-cpl-transformx-crs-aoi-pipeline-reverse-ogrcreatecoordinatetrans\nst_crs(osm_bikes$osm_points) <- 4326\nsf_bikes <- osm_bikes$osm_points\n\n#Chicago map layer\nchicago_map <- get_stamenmap(getbb(\"Chicago\"), \n                       maptype = \"terrain\",\n                       crop=FALSE,\n                       zoom = 10)\n\n\n\n\n\nShow code\n\nggmap(ggmap = chicago_map)+\n  geom_sf(data = sf_bikes,\n          inherit.aes = FALSE,\n          aes(colour = \"OSM\"),\n          #fill = \"blue\",\n          alpha = 1,\n          size = 1,\n          shape = 21)+\n  geom_point(data = df_stations,\n             aes(x = lng,\n             y= lat,\n             colour = \"Cyclistic\"),\n             #fill = \"Cyclistic\"),\n             alpha = 1,\n             size = .5,\n             shape = 21)+\n  #https://r-spatial.org/r/2018/10/25/ggplot2-sf.html\n  annotation_scale(location = \"bl\", width_hint = 0.5)+\n  annotation_north_arrow(location = \"bl\", which_north = \"true\", \n                         pad_x = unit(0.15, \"in\"), pad_y = unit(0.25, \"in\"),\n                         style = north_arrow_fancy_orienteering)+\n  theme_minimal()+\n  scale_colour_manual(name=\"Data source\",\n                     values=c(OSM=\"red\", Cyclistic=\"blue\"))+\n  #https://stackoverflow.com/questions/24496984/how-to-add-legend-to-ggplot-manually-r\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"darkgray\"),\n    legend.key = element_rect(fill = \"lightgrey\", color = NA),\n    # Change legend key size and key width\n    legend.key.size = unit(1.5, \"cm\"),\n    legend.key.width = unit(0.5,\"cm\"),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1)\n  )+\n  labs(title = \"Location of Cyclistic docking stations\",\n            subtitle = \"Data from Cyclistic dataset vs Open Street Map data\", \n            caption = \"Cyclistic's dataset (April 2021-Mars 2022) + OSM data. \\t author: E. Narro\")\n\n\n\n\nMember users and\ncasual users main differences\nTime-based\ndifferences between members and casual users\nUse of bikes per week day\nHere is a frequency table and a graphic to see the difference in the\nuse per week day:\n\n\nShow code\n\nprint(ctable(df_trips$week_day, df_trips$user), method = \"render\")\n\n\n\nCross-Tabulation, Row Proportions\nweek_day * user\nData Frame: df_trips\n\nuser\n\n\nweek_day\n\nMember User\nCasual User\nTotal\n\nMon\n\n431793\n(\n60.0%\n)\n288337\n(\n40.0%\n)\n720130\n(\n100.0%\n)\n\nTue\n\n481989\n(\n63.9%\n)\n272055\n(\n36.1%\n)\n754044\n(\n100.0%\n)\n\nWed\n\n491379\n(\n63.5%\n)\n281892\n(\n36.5%\n)\n773271\n(\n100.0%\n)\n\nThu\n\n467442\n(\n61.8%\n)\n289085\n(\n38.2%\n)\n756527\n(\n100.0%\n)\n\nFri\n\n445076\n(\n55.4%\n)\n358461\n(\n44.6%\n)\n803537\n(\n100.0%\n)\n\nSat\n\n423006\n(\n43.9%\n)\n541153\n(\n56.1%\n)\n964159\n(\n100.0%\n)\n\nSun\n\n380137\n(\n44.5%\n)\n474889\n(\n55.5%\n)\n855026\n(\n100.0%\n)\n\nTotal\n\n3120822\n(\n55.5%\n)\n2505872\n(\n44.5%\n)\n5626694\n(\n100.0%\n)\nGenerated by summarytools 1.0.0 (R version 4.2.0)2022-05-11\n\n\nShow code\n\n#https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization-2.1.pdf\nggplot(data=df_trips)+\n  geom_bar(mapping=aes(x= week_day, \n                       fill = user\n                       ))+\n  scale_fill_brewer(palette = \"Paired\")+\n  theme_dark()+\n  labs(title = \"Use of bikes per day of the week\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022 cumulative\",\n       caption = \"Cyclistic's dataset, period: April 2021 - Mars 2022 \\t E. Narro\",\n       x = \"Day of the week\",\n       y= \"Number of rides in a year (x 1000)\",\n       fill = \"User type\"\n  )+\n  #https://stackoverflow.com/questions/44600061/ggplot-scales-unit-format-thousands-one-decimal-place\n  scale_y_continuous(labels = scales::unit_format(\n    unit = \"k\", \n    scale = 1e-3,\n    accuracy = 1))+\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"lightgrey\"),\n    legend.key = element_rect(fill = \"white\", color = NA),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1)\n  )\n\n\n\n\nDuring weekdays, most of the rides are done by members, they make\nabout 60% of them from Monday to Thursday, and 55% of them on Fridays.\nDuring the weekends, the tendency is reversed and casual users make\nabout 55% of the rides. It is also interesting to see that\nmembers make less rides during the weekends, in absolute\nnumbers. In comparison, rides by casual users on\nSaturdays are double the ones on Tuesdays. It is also\ninteresting to see that on Fridays, rides by members are similar to\nother workdays but the proportion decreases mostly due to an increase of\ncasual user rides.\nThis data shows that there is a consistent base of trips done\nby casual users during all days of the week, even on week days.\nThis is interesting because if we want to increase memberships,\nthere might be a good base of potential users with no time-based\nlimitations. On the other hand, the big amount of casual user\nrides during the weekends could both be due to Chicago residents using\nthe service for leisure, in which case maybe the current\nmembership system is not adapted to their use, and to tourists\ncoming for the weekend, in which case membership is not really a viable\noption.\nIf the goal is to sell memberships to casual riders, maybe\nmarketing campaigns should take place on weekends.\nUse of bikes per month\nHere is a frequency table and a graphic to see the difference in the\nuse per month:\n\n\nShow code\n\nprint(ctable(df_trips$month, df_trips$user), method = \"render\")\n\n\n\nCross-Tabulation, Row Proportions\nmonth * user\nData Frame: df_trips\n\nuser\n\n\nmonth\n\nMember User\nCasual User\nTotal\n\nApr\n\n197367\n(\n59.5%\n)\n134618\n(\n40.5%\n)\n331985\n(\n100.0%\n)\n\nMay\n\n269704\n(\n51.6%\n)\n252730\n(\n48.4%\n)\n522434\n(\n100.0%\n)\n\nJun\n\n352402\n(\n49.2%\n)\n364151\n(\n50.8%\n)\n716553\n(\n100.0%\n)\n\nJul\n\n373588\n(\n46.2%\n)\n435008\n(\n53.8%\n)\n808596\n(\n100.0%\n)\n\nAug\n\n385180\n(\n48.6%\n)\n406735\n(\n51.4%\n)\n791915\n(\n100.0%\n)\n\nSep\n\n385686\n(\n51.8%\n)\n358611\n(\n48.2%\n)\n744297\n(\n100.0%\n)\n\nOct\n\n367282\n(\n59.2%\n)\n253263\n(\n40.8%\n)\n620545\n(\n100.0%\n)\n\nNov\n\n248584\n(\n70.3%\n)\n105173\n(\n29.7%\n)\n353757\n(\n100.0%\n)\n\nDec\n\n174812\n(\n71.8%\n)\n68582\n(\n28.2%\n)\n243394\n(\n100.0%\n)\n\nJan\n\n83720\n(\n82.2%\n)\n18073\n(\n17.8%\n)\n101793\n(\n100.0%\n)\n\nFeb\n\n92022\n(\n81.5%\n)\n20904\n(\n18.5%\n)\n112926\n(\n100.0%\n)\n\nMar\n\n190475\n(\n68.4%\n)\n88024\n(\n31.6%\n)\n278499\n(\n100.0%\n)\n\nTotal\n\n3120822\n(\n55.5%\n)\n2505872\n(\n44.5%\n)\n5626694\n(\n100.0%\n)\nGenerated by summarytools 1.0.0 (R version 4.2.0)2022-05-11\n\n\nShow code\n\nggplot(data=df_trips)+\n  geom_bar(mapping=aes(x= month, \n                       fill = user, \n  ))+\n  scale_fill_brewer(palette = \"Paired\")+\n  theme_dark()+\n  labs(title = \"Use of bikes per month\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022\",\n       caption = \"Cyclistic's dataset, period: April 2021 - Mars 2022 \\t E. Narro\",\n       x = \"Month\",\n       y= \"number of rides (x 1000)\"\n  )+\n  #https://stackoverflow.com/questions/44600061/ggplot-scales-unit-format-thousands-one-decimal-place\n  scale_y_continuous(labels = scales::unit_format(\n    unit = \"k\", \n    scale = 1e-3,\n    accuracy = 1))+\ntheme(\n  legend.background = element_rect(fill = \"lightgrey\"),\n  legend.key = element_rect(fill = \"white\", color = NA),\n  panel.border = element_rect(color = \"darkgrey\",\n                              fill = NA,\n                              size = 1)\n)\n\n\n\n\nAs we can observe, the high seasonality of the\nservice also affects the distribution of the type of user. From May to\nSeptember, the amount of rides done by members and casual users is\nalmost even, and significantly higher for casual users during July (6%\nmore). During the colder months, most rides are done by members, from\n60% of the rides on April to over 80% in January and February.\nThis data shows that casual rides from December to March are very\nlow, which can make it challenging to increase yearly\nsubscriptions if the service is not accessed 30% of the time.\nLooking at the data from Members can however give us some hope, since\nthis group also makes way less rides during the winter (member rides in\nJanuary are about 1/4 of the ones in July). In fact, rides by members in\nJuly, August and September double or more than double rides in December,\nJanuary and February, and almost double those in March and April.\nIt could be a good idea to get information about why users\nsubscribe to a service they do not use (or way less often) almost half\nof the year (Again, since this is case study, we do not\nhave access to individual user rides, but if we were working with all\nthe available data, it would be necessary to see the rides per member\nand also how much individual casual users use the service in a\nyear). But there is definitely less amplitude with member data,\nsince casual user rides in January and February are 20 times\nless abundant than in July and August.\nThis data also seems to work well with the previous one about days of\nthe week. There is probably a fair amount of leisure riders that use the\nservice with good weather conditions. Finding ways to make\nwinter rides more attractive could increase the pool of users\npotentially interested in memberships. Also, it is\nprobably a better idea to make marketing efforts from May to\nSeptember when the service is attractive, and definitely not\nduring the winter.\nFinally, there is probably a fair amount of rides during summer\nholidays by foreigners to Chicago, in which case the yearly subscription\nmethod is not adapted.\nUse of service per hour of\nthe day\nThe following table summarizes the use of the service per hour of the\nday (of starting point):\n\n\nShow code\n\nprint(ctable(df_trips$hour, df_trips$user), method = \"render\")\n\n\n\nCross-Tabulation, Row Proportions\nhour * user\nData Frame: df_trips\n\nuser\n\n\nhour\n\nMember User\nCasual User\nTotal\n\n0\n\n33463\n(\n38.7%\n)\n53115\n(\n61.3%\n)\n86578\n(\n100.0%\n)\n\n1\n\n22137\n(\n36.3%\n)\n38839\n(\n63.7%\n)\n60976\n(\n100.0%\n)\n\n2\n\n12754\n(\n33.3%\n)\n25529\n(\n66.7%\n)\n38283\n(\n100.0%\n)\n\n3\n\n7402\n(\n34.5%\n)\n14043\n(\n65.5%\n)\n21445\n(\n100.0%\n)\n\n4\n\n8404\n(\n46.1%\n)\n9822\n(\n53.9%\n)\n18226\n(\n100.0%\n)\n\n5\n\n31312\n(\n71.3%\n)\n12621\n(\n28.7%\n)\n43933\n(\n100.0%\n)\n\n6\n\n83307\n(\n76.2%\n)\n25973\n(\n23.8%\n)\n109280\n(\n100.0%\n)\n\n7\n\n156034\n(\n76.6%\n)\n47541\n(\n23.4%\n)\n203575\n(\n100.0%\n)\n\n8\n\n182109\n(\n73.9%\n)\n64419\n(\n26.1%\n)\n246528\n(\n100.0%\n)\n\n9\n\n134241\n(\n63.9%\n)\n75905\n(\n36.1%\n)\n210146\n(\n100.0%\n)\n\n10\n\n130408\n(\n55.7%\n)\n103561\n(\n44.3%\n)\n233969\n(\n100.0%\n)\n\n11\n\n156131\n(\n53.8%\n)\n133870\n(\n46.2%\n)\n290001\n(\n100.0%\n)\n\n12\n\n181408\n(\n53.2%\n)\n159373\n(\n46.8%\n)\n340781\n(\n100.0%\n)\n\n13\n\n177753\n(\n51.1%\n)\n170410\n(\n48.9%\n)\n348163\n(\n100.0%\n)\n\n14\n\n174898\n(\n49.9%\n)\n175756\n(\n50.1%\n)\n350654\n(\n100.0%\n)\n\n15\n\n203364\n(\n52.2%\n)\n186372\n(\n47.8%\n)\n389736\n(\n100.0%\n)\n\n16\n\n263778\n(\n56.5%\n)\n203427\n(\n43.5%\n)\n467205\n(\n100.0%\n)\n\n17\n\n327358\n(\n58.3%\n)\n234494\n(\n41.7%\n)\n561852\n(\n100.0%\n)\n\n18\n\n274871\n(\n56.4%\n)\n212564\n(\n43.6%\n)\n487435\n(\n100.0%\n)\n\n19\n\n196893\n(\n54.4%\n)\n165144\n(\n45.6%\n)\n362037\n(\n100.0%\n)\n\n20\n\n133839\n(\n52.5%\n)\n120967\n(\n47.5%\n)\n254806\n(\n100.0%\n)\n\n21\n\n100089\n(\n49.3%\n)\n103072\n(\n50.7%\n)\n203161\n(\n100.0%\n)\n\n22\n\n76447\n(\n44.4%\n)\n95573\n(\n55.6%\n)\n172020\n(\n100.0%\n)\n\n23\n\n52422\n(\n41.6%\n)\n73482\n(\n58.4%\n)\n125904\n(\n100.0%\n)\n\nTotal\n\n3120822\n(\n55.5%\n)\n2505872\n(\n44.5%\n)\n5626694\n(\n100.0%\n)\nGenerated by summarytools 1.0.0 (R version 4.2.0)2022-05-11\n\n\nAs we can see, members usually represent most of the rides. We can\nhowever see some interesting time frames:\nFrom 5 AM to 9 AM, members represent between 63% and 76% of\nthe rides: This is usually a time frame when people commute to\nwork AND also when people do not do leisure activities.\nFrom 10 AM to 3 PM, members do more rides, but it is more even.\nFrom 4 PM to 7 PM, members do significantly more rides than casual\nusers, but the amount of total rides is also bigger. People probably\ncommute from work and some others also enjoy leisure time in this\nrange.\nFrom 8 PM to 9 PM, the use of the service starts to decrease and it\nevens between members and casual users.\nFrom 10 PM to 4 AM, the service is very low and it is mostly used by\ncasual users.\nWe could estimate to know how many people use the service to commute.\nFor this, we can calculate the percentage of members and casual users\nthat use the service from 5 AM to 9 AM on week days, from the total\namount of rides:\n\n\nShow code\n\ndf_trips %>%\n  filter(hour==5 |hour==6 | hour==7 | hour==8 | hour==9 ) %>%\n  filter(week_day!=\"Sat\" & week_day != \"Sun\") %>%\n  filter(user == \"Member User\")%>%\n  count()*100 / count(df_trips)\n\n\n         n\n1 8.825378\n\nShow code\n\ndf_trips %>%\n  filter(hour==5 |hour==6 | hour==7 | hour==8 | hour==9 ) %>%\n  filter(week_day!=\"Sat\" & week_day != \"Sun\") %>%\n  filter(user == \"Casual User\")%>%\n  count()*100 / count(df_trips)\n\n\n         n\n1 2.787498\n\nMember rides from 5 AM to 9 AM on week days represent 8.82 % of the\ntotal rides, and 2.79% for the casual users. Also, people who commute\nhave to go both ways. Some of this rides could also be for other\npurposes. Some people may also commute at different times (even earlier\nfor some users, people who work at night…) or even on weekends. It would\nbe good to have a more detailed use of the service. We can however\nestimate that between 15% and 20% of the rides are done to\ncommute, and the rest…, probably leisure. It is also\nimportant to note that, always as an estimation, members make up\naround 3/4 of the commute rides..\nHere is a plot of the distribution of rides per hour of the day:\n\n\nShow code\n\nggplot(data=df_trips)+\n  geom_bar(mapping=aes(x= hour, \n                       fill = user\n  ))+\n  scale_fill_brewer(palette = \"Paired\")+\n  theme_dark()+\n  labs(title = \"Use of bikes per hour of the day\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022 cumulative\",\n       caption = \"Cyclistic's dataset, period: April 2021 - Mars 2022 \\t E. Narro\",\n       x = \"Hour of the day\",\n       y= \"Number of rides in a year (x 1000)\",\n       fill = \"User type\"\n  )+\n  scale_y_continuous(labels = scales::unit_format(\n    unit = \"k\", \n    scale = 1e-3,\n    accuracy = 1))+\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"lightgrey\"),\n    legend.key = element_rect(fill = \"white\", color = NA),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1))\n\n\n\n\nDeveloping the use of the bike service in the mornings (to commute or\nother uses) probably needs to create a new market, since there are very\nlittle users for both groups in that range. Creating a new market could\nbe advantageous because the bikes are already there. Ideas to create new\nmarket segment:\nFocus on elder people, recently retired (Senior plans for example,\nwith adapted pricing)\nPartner with companies or other employers to offer memberships as\nperks so people commute on bikes. This could be a cheap attractive perk\nfor the company, could also be used to communicate about low carbon\nemissions and should have a beneficial impact on employees’ health.\nIn the afternoons, there is already a high demand, so the goal should\nbe to create new memberships focusing on existing users:\nIf marketing campaigns are done, do them in the afternoons\nOffer exclusive service to members, related to their leisure\nactivities: Make the subscription be more than just an economical\ngain.\nLength of use of the service\nWe have a look at ride length by user type:\n\n\nShow code\n\nprint(stby(data = df_trips$ride_length/60,\n     INDICES = df_trips$user,\n     FUN = descr,\n     stats = \"common\",\n     transpose = TRUE),\n     method=\"render\")\n\n\n\nDescriptive Statistics\n ride_length/60 by user \nData Frame: df_trips\n  N: 3120822\n\n      Mean\n      Std.Dev\n      Min\n      Median\n      Max\n      N.Valid\n      Pct.Valid\n    \n        Member User\n      13.32\n      19.71\n      1.02\n      9.53\n      1435.47\n      3120822\n      100.00\n    \n        Casual User\n      26.75\n      46.38\n      1.02\n      15.97\n      1439.85\n      2505872\n      100.00\n    Generated by summarytools 1.0.0 (R version 4.2.0)2022-05-11\n\n\nShow code\n\n#Ride length per User type\nggplot(data = df_trips)+\n  geom_boxplot(outlier.shape = NA,\n               mapping = aes(x = user,\n                             y = ride_length,\n                             fill = user\n                             ))+\n  labs(title = \"Ride Length per user type\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022. In minutes\",\n       caption = \"Cyclistic's dataset, period: April 2021 - Mars 2022 \\t E. Narro\",\n       x = \"User type\",\n       y= \"Duration of rides (mins)\"\n  )+\n  scale_fill_brewer(palette = \"Paired\")+\n  theme_dark()+\n  theme()+\n  theme(legend.position = \"none\",\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color='grey'))+\n  scale_y_continuous(\n    limits = c(0, 3000),\n    breaks = c(0, 300, 600, 900, 1200, 1500, 1800, 2100, 2400, 2700, 3000),\n    labels = c(\"0\", \"5\", \"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\"),\n    )\n\n\n\n\nRides done by members are usually 10 minutes shorter than the ones by\ncasual users, and the median ride is 5 minutes shorter. We can also see\nthat members use the service in a more regular way, the amplitude of use\nof the service is way lower than for casual users. Half of the trips for\nmembers last between 5 and 15 minutes, and between 8 and 23 minutes for\nmembers. It is curious to see that the maximum length for casual users\n(without the outlier points) is close but above 45 minutes, and slightly\nabove 30 minutes for members. Since the membership includes unlimited\nrides under 45 minutes, we can state:\nThat the current membership offer could fit most current\ncasual users’ needs.\nThat 13.4% of casual users make longer than 45 minutes\ntrips (see the calculation below). So for them, the current\nmembership is not adapted.\n\n\nShow code\ndf_trips %>%\n  filter(user == \"Casual User\") %>%\n  select(ride_length) %>%\n  count(ride_length > 2700) %>%\n  mutate(percent = n*100/sum(n))\n\nOn the other hand, members almost never drive longer than 45\nminutes, in fact, not even close. t could be important for\nusers to make sure that they will never pay over the extra $0.16 per\nminute if they pay for a subscription. This could probably be seen as\npaying twice but this is an assumption, not a claim. it could be\ninteresting to see if increasing the maximum length of the ride\nwithout extra charging could increase the amount of\nsubscriptions by casual users. Maybe different kind of\nsubscriptions with different maximum length amounts and pricing could be\noffered.\nIt would be good to know why do this users drive that long (do they\nhave longer distances to ride, do they ride way slower, do they use the\nbikes to make sport…)\nWe can also compare the length of rides between members and casual\nusers for a weekly or monthly period :\n\n\nShow code\n\n#Ride length per user type and day of the week\nggplot(data = df_trips)+\n  geom_boxplot(outlier.shape = NA,\n               mapping = aes(x = user,\n                             y = ride_length,\n                             fill = week_day\n               ))+\n  labs(title = \"Ride Length per user type and day of the week\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022. In minutes\",\n       caption = 'Cyclistic\"s dataset, period: April 2021 - Mars 2022 \\t E. Narro',\n       x = \"User type\",\n       y= \"Duration of rides (mins)\"\n  )+\n  scale_fill_brewer(palette = \"Set1\", name=\"Day of the week\")+\n  theme_dark()+\n  theme()+\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color='grey'))+\n  scale_y_continuous(\n    limits = c(0, 3800),\n    breaks = c(0, 300, 600, 900, 1200, 1500, 1800, 2100, 2400, 2700, 3000, 3300, 3600),\n    labels = c(\"0\", \"5\", \"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\"),\n  )\n\n\n\nShow code\n\n#Ride length per user type and month\nggplot(data = df_trips)+\n  geom_boxplot(outlier.shape = NA,\n               mapping = aes(x = user,\n                             y = ride_length,\n                             fill = month\n               ))+\n  labs(title = \"Ride Length per user type and month\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022. In minutes\",\n       caption = 'Cyclistic\"s dataset, period: April 2021 - Mars 2022 \\t E. Narro',\n       x = \"User type\",\n       y= \"Duration of rides (mins)\"\n  )+\n  scale_fill_brewer(palette = \"Set3\", name=\"Day of the week\")+\n  theme_dark()+\n  theme()+\n  theme(legend.key.height= unit(0.4, 'cm'),\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color='grey'))+\n  guides(fill=guide_legend(ncol=2))+ #make the legend have 2 cols\n  scale_y_continuous(\n    limits = c(0, 3800),\n    breaks = c(0, 300, 600, 900, 1200, 1500, 1800, 2100, 2400, 2700, 3000, 3300, 3600),\n    labels = c(\"0\", \"5\", \"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\", \"55\", \"60\"),\n  )\n\n\n\n\nAs we can see, members have a more consistent use of the service,\nwith shorter rides along weekdays and more long rides during the\nweekends. Casual users follow this trend too, but it seems less\nhomogeneous, and the amplitude is way bigger.\nThe homogeneity of members rides is even more visible when length is\nstudied by month. Winter months see shorter rides, but casual\nusers actually make the longest rides in April and May. This is\nimportant because if we decide to market memberships at this period of\nthe year (as stated earlier), we could be offering a product not adapted\nto a fair amount of users.\nThe following density chart also gives a good image of the use\nlength:\n\n\nShow code\n\nggplot(data=df_trips)+\n  geom_density(aes(x = ride_length, color = user, fill=user, after_stat(count)), alpha = 0.6)+\n  labs(title = \"Ride Length density per user type\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022. In minutes\",\n       caption = \"Cyclistic's dataset, period: April 2021 - Mars 2022 \\t E. Narro\",\n       x = \"Duration of rides (mins)\",\n       y = \"Amount of rides (thousands)\"\n  )+\n  scale_fill_brewer(palette = \"Set1\")+\n  theme_dark()+\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"lightgrey\"),\n    legend.key = element_rect(fill = \"white\", color = NA),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1)\n  )+\n  scale_x_continuous(\n    limits = c(0, 3000),\n    breaks = c(0, 300, 600, 900, 1200, 1500, 1800, 2100, 2400, 2700, 3000),\n    labels = c(\"0\", \"5\", \"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\"),\n  )+\n  scale_y_continuous(labels = scales::unit_format(\n    unit = \"k\", \n    scale = 1e-3,\n    accuracy = 1))\n\n\n\n\nA significant amount of member rides are under 10 minutes, even under\n5 minutes. It is the biggest and main difference between both groups:\nmembers do a lot of short rides. However, correlation\ndoes not imply causation, so we can not know if users subscribe to ride\nquickly between points or if members ride more often, shorter periods,\nbecause they already paid and then: “why not”.\nThe histograms below also show this trends.\n\n\nShow code\n\n#Histogam of length of ride 0-3000\nggplot(data = df_trips)+\n  geom_histogram(mapping=aes(x = ride_length, fill=week_day))+\n                 #col = \"black\")+\n  labs(title = \"Distribution of ride length\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022. 0 - 50 mins\",\n       caption = 'Cyclistic\"s dataset, period: April 2021 - Mars 2022 \\t E. Narro',\n       x = \"Ride length (mins)\",\n       y= \"Number of observations (thousands)\")+\n  scale_x_continuous(limits = c(0000, 3000),\n                     breaks = c(0, 300, 600, 900, 1200, 1500, 1800, 2100, 2400, 2700, 3000),\n                     labels = c(\"0\", \"5\", \"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\", \"45\", \"50\"),)+\n  scale_y_continuous(labels = scales::unit_format(\n    unit = \"k\", \n    scale = 1e-3,\n    accuracy = 1))+\n  facet_wrap(~user)\n\n\n\nShow code\n\n#Histogam of length of ride 3000-6000\nggplot(data = df_trips)+\n  geom_histogram(mapping=aes(x = ride_length, fill=week_day))+\n                 #col = \"black\")+\n  labs(title = \"Distribution of ride length\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022. 50 - 100 mins\",\n       caption = 'Cyclistic\"s dataset, period: April 2021 - Mars 2022 \\t E. Narro',\n       x = \"Ride length (mins)\",\n       y= \"Number of observations (thousands)\")+\n  scale_x_continuous(limits = c(3000, 6000),\n                     breaks = c(3000, 3300, 3600, 3900, 4200, 4500, 4800, 5100, 5400, 5700, 6000),\n                     labels = c(\"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\", \"90\", \"95\", \"100\"),)+\n  scale_y_continuous(labels = scales::unit_format(\n    unit = \"k\", \n    scale = 1e-3,\n    accuracy = 1))+\n  facet_wrap(~user)\n\n\n\n\nGeographic\ndifferences between members and casual users\nRide distance\nAs previously stated, we do not really have the information about\nactual ride distance. but we have information about distance between\nstarting and ending point. Let’s have a look at the ride distance\ndistribution per user type:\n\n\nShow code\n\nprint(stby(data = df_trips$ride_distance,\n     INDICES = df_trips$user,\n     FUN = descr,\n     stats = \"common\",\n     transpose = TRUE),\n     method = \"render\")\n\n\n\nDescriptive Statistics\n ride_distance by user \nData Frame: df_trips\n  N: 3120822\n\n      Mean\n      Std.Dev\n      Min\n      Median\n      Max\n      N.Valid\n      Pct.Valid\n    \n        Member User\n      2142.41\n      1889.28\n      0.00\n      1561.37\n      32058.72\n      3120822\n      100.00\n    \n        Casual User\n      2293.20\n      2057.15\n      0.00\n      1757.17\n      114511.71\n      2505872\n      100.00\n    Generated by summarytools 1.0.0 (R version 4.2.0)2022-05-11\n\n\nShow code\n\nggplot(data = df_trips)+\n  geom_boxplot(outlier.shape = NA,\n               mapping = aes(x = user,\n                             y = ride_distance,\n                             fill = user\n               ))+\n  labs(title = \"Ride distance between start and end point\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022. In meters\",\n       caption = 'Cyclistic\"s dataset, period: April 2021 - Mars 2022 \\t E. Narro',\n       x = \"User type\",\n       y= \"Distance between start and end (m)\"\n  )+\n  scale_fill_brewer(palette = \"Paired\")+\n  theme_dark()+\n  theme()+\n  theme(legend.position = \"none\",\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color='grey'))+\n  scale_y_continuous(limits = c(0, 6000)\n  )\n\n\n\nShow code\n\nggplot(data=df_trips)+\n  geom_density(aes(x = ride_distance, color = user, fill=user, after_stat(count)), alpha = 0.5)+\n  labs(title = \"Ride distance density per user type\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022. In meters\",\n       caption = \"Cyclistic's dataset, period: April 2021 - Mars 2022 \\t E. Narro\",\n       x = \"Distance of rides (m)\",\n       y = \"Amount of rides (thousands)\"\n  )+\n  scale_fill_brewer(palette = \"Set1\")+\n  theme_dark()+\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"lightgrey\"),\n    legend.key = element_rect(fill = \"white\", color = NA),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1)\n  )+\n  scale_x_continuous(limits = c(0, 4000))+\n  scale_y_continuous(labels = scales::unit_format(\n    unit = \"k\", \n    scale = 1e-3,\n    accuracy = 1))\n\n\n\n\nWe can see several interesting things here. Casual users ride\nslightly longer distances both in average and as median values (between\n100 and 200 m). The distributions of distance are very similar, with a\nbit more amplitude for casual users.\nThis initial observations seem to go in the same direction than the\ntime-based differences, but in a less obvious way.\nIt is interesting to see that for the 0 distance trips, non-members\nare much more represented than members. In fact, rides of 0 distance\nrepresent 5.56% of the dataset, 3.5% only for casual riders (see\ncalculation below).\n\n\nShow code\n\ndf_trips %>%\n  filter(ride_distance==0)%>%\n  count(user == \"Casual User\")%>%\n  mutate(percent = n*100/sum(n))%>%\n  mutate(total_percent = n*100/sum(count(df_trips)))\n\n\n  user == \"Casual User\"      n  percent total_percent\n1                 FALSE 112295 35.86611      1.995755\n2                  TRUE 200800 64.13389      3.568703\n\nRides of distance 0\nThe following map represents the 10 docking stations with more bikes\nused and returned to the same place, by user type. We can see that all\nthe stations for both groups are around downtown Chicago. It is worth\nmentioning that one point for member users is near\nUniversity.\n\n\nShow code\n\n#Fix station file !!\ndf_stations <- df_stations %>%\n  distinct(id_original, .keep_all = TRUE)\n\n# Get the dataframes\ndf_stations_zero_casual <- df_trips %>%\n  filter(ride_distance==0)%>%\n  filter(user == \"Casual User\")%>%\n  filter(start_station_id != \"\")%>%\n  group_by(start_station_id)%>%\n  summarise(count_stations= n())%>%\n  arrange(desc(count_stations))\ndf_stations_zero_casual <- left_join(df_stations_zero_casual, \n                    df_stations, \n                    by = c(\"start_station_id\" = \"id_original\"))\n\ndf_stations_zero_casual <- df_stations_zero_casual[1:10,]\n\ndf_stations_zero_members <- df_trips %>%\n  filter(ride_distance==0)%>%\n  filter(user == \"Member User\")%>%\n  filter(start_station_id != \"\")%>%\n  group_by(start_station_id)%>%\n  summarise(count_stations= n())%>%\n  arrange(desc(count_stations))\ndf_stations_zero_members <- left_join(df_stations_zero_members, \n                    df_stations, \n                    by = c(\"start_station_id\" = \"id_original\"))\n\ndf_stations_zero_members <- df_stations_zero_members[1:10,]\n\n#Commercial area\nq_commercial_area <- getbb(\"Chicago\") %>%\n  opq() %>%\n  add_osm_feature(\"landuse\", \"commercial\")\nosm_commercial_area <- osmdata_sf(q_commercial_area)\nst_crs(osm_commercial_area$osm_polygons) <- 4326\nsf_commercial_area <- osm_commercial_area$osm_polygon\n\n#Parks\nq_park <- getbb(\"Chicago\") %>%\n  opq() %>%\n  add_osm_feature(\"leisure\", \"park\")\nosm_park <- osmdata_sf(q_park)\nst_crs(osm_park$osm_polygons) <- 4326\nsf_park <- osm_park$osm_polygon\nstation_map_1 <-get_stamenmap( bbox=c(left = -87.85, \n                                      bottom = 41.85,\n                                      right = -87.4,\n                                      top = 42.0),\n                               zoom = 11,\n                               crop = FALSE)\n\nstation_map_2 <-get_stamenmap( bbox=c(left = -87.65, \n                                      bottom = 41.85,\n                                      right = -87.6,\n                                      top = 41.9),\n                               zoom = 13,\n                               crop = FALSE) \n\n\n\n\n\nShow code\n\nggmap(ggmap = station_map_1)+\n  geom_sf (data = sf_commercial_area,\n           inherit.aes = FALSE,\n           aes(fill = \"commercial\"),\n           color = \"yellow\",\n           alpha = 1)+\n  geom_sf (data = sf_park,\n           inherit.aes = FALSE,\n           aes(fill = \"parks\"),\n           color = \"green\",\n           alpha = 1)+\n  geom_point (data = df_stations_zero_casual,\n             aes(x = lng,\n                 y= lat,\n                 color = \"Casual\",\n                 size = count_stations),\n             alpha = 1,\n             shape = 21)+ \n  geom_point(data = df_stations_zero_members,\n             aes(x = lng,\n                 y= lat,\n                 color = \"Members\",\n                 size = count_stations),\n             alpha = 1,\n             shape = 21)+\n  #https://r-spatial.org/r/2018/10/25/ggplot2-sf.html\n  annotation_scale(location = \"bl\", width_hint = 0.5)+\n  annotation_north_arrow(location = \"bl\", which_north = \"true\", \n                         pad_x = unit(0.15, \"in\"), pad_y = unit(0.25, \"in\"),\n                         style = north_arrow_fancy_orienteering)+\n  theme_minimal()+\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"darkgray\"),\n    legend.key = element_rect(fill = \"lightgrey\", color = NA),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1),\n  )+\n  scale_color_manual(name=\"User type\",\n                    values=c(Casual=\"red\", Members=\"blue\"))+\n  scale_fill_manual(name=\"Land Use\",\n                    values=c(commercial=\"yellow\", parks=\"green\"))+\n  \n  labs(title = \"Location of most popular docking stations\",\n       subtitle = \"Stations where rides both start and end\", \n       caption = \"Cyclistic's dataset (April 2021-Mars 2022) + OSM data. \\t author: E. Narro\")+\n  geom_rect(xmin = -87.64, xmax = -87.6,   ymin = 41.838, ymax = 41.93, alpha = 0, color = \"red\")\n\n\n\n\n\n\nShow code\n\nggmap(ggmap = station_map_2)+\n  geom_sf (data = sf_commercial_area,\n           inherit.aes = FALSE,\n           aes(fill = \"commercial\"),\n           color = \"yellow\",\n           alpha = 1)+\n  geom_sf (data = sf_park,\n           inherit.aes = FALSE,\n           aes(fill = \"parks\"),\n           color = \"green\",\n           alpha = 1)+\n  geom_point (data = df_stations_zero_casual,\n              aes(x = lng,\n                  y= lat,\n                  color = \"Casual\",\n                  size = count_stations),\n              alpha = 1,\n              shape = 21)+ \n  geom_point(data = df_stations_zero_members,\n             aes(x = lng,\n                 y= lat,\n                 color = \"Members\",\n                 size = count_stations),\n             alpha = 1,\n             shape = 21)+\n  #https://r-spatial.org/r/2018/10/25/ggplot2-sf.html\n  annotation_scale(location = \"bl\", width_hint = 0.5)+\n  annotation_north_arrow(location = \"bl\", which_north = \"true\", \n                         pad_x = unit(0.15, \"in\"), pad_y = unit(0.25, \"in\"),\n                         style = north_arrow_fancy_orienteering)+\n  theme_minimal()+\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"darkgray\"),\n    legend.key = element_rect(fill = \"lightgrey\", color = NA),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1)\n  )+\n  scale_color_manual(name=\"User type\",\n                     values=c(Casual=\"red\", Members=\"blue\"))+\n  scale_fill_manual(name=\"Land Use\",\n                    values=c(commercial=\"yellow\", parks=\"green\"))+\n  \n  labs(title = \"Location of most popular docking stations\",\n       subtitle = \"Stations where rides both start and end\", \n       caption = \"Cyclistic's dataset (April 2021-Mars 2022) + OSM data. \\t author: E. Narro\")\n\n\n\n\nWe can see that most of the rides that end and start in the same\nplace are in very leisure-centric areas of downtown Chicago.\nMost popular starting\nstations\nNow we want to take a closer look at more popular stations to start a\ntrip a from . The following map shows the 50 most used starting stations\nfor members as well as the 50 most used stations for casual users. It\nalso shows all the docking stations as black dots :\n\n\nShow code\n\ndf_stations_start_casual <- df_trips %>%\n  filter(ride_distance!=0)%>%\n  filter(user == \"Casual User\")%>%\n  filter(start_station_id != \"\")%>%\n  group_by(start_station_id)%>%\n  summarise(count_stations= n())%>%\n  arrange(desc(count_stations))\n\ndf_stations_start_casual <- left_join(df_stations_start_casual, \n                                     df_stations, \n                                     by = c(\"start_station_id\" = \"id_original\"))\n\ndf_stations_start_members <- df_trips %>%\n  filter(ride_distance!=0)%>%\n  filter(user == \"Member User\")%>%\n  filter(start_station_id != \"\")%>%\n  group_by(start_station_id)%>%\n  summarise(count_stations= n())%>%\n  arrange(desc(count_stations))\ndf_stations_start_members <- left_join(df_stations_start_members, \n                                     df_stations, \n                                     by = c(\"start_station_id\" = \"id_original\"))\n\ndf_stations_start_casual <- df_stations_start_casual[1:50,]\ndf_stations_start_members <- df_stations_start_members[1:50,]\n\n\n\n\n\nShow code\n\nggmap(ggmap = chicago_map)+\n  geom_sf (data = sf_commercial_area,\n           inherit.aes = FALSE,\n           aes(fill = \"commercial\"),\n           color = \"yellow\",\n           alpha = 1)+\n  geom_sf (data = sf_park,\n           inherit.aes = FALSE,\n           aes(fill = \"parks\"),\n           color = \"green\",\n           alpha = 1)+\n  geom_point(data = df_stations,\n             aes(x = lng,\n                 y= lat,\n                 color = \"Station\"),\n             size=1,\n             fill=\"black\",\n             alpha = .5,\n             shape = 20)+\n  geom_point(data = df_stations_start_members,\n             aes(x = lng,\n                 y= lat,\n                 color = \"Members\",\n                 size = count_stations),\n             alpha = 1,\n             shape = 23)+\n  geom_point (data = df_stations_start_casual,\n              aes(x = lng,\n                  y= lat,\n                  color = \"Casual\",\n                  size = count_stations),\n              alpha = 1,\n              shape = 21)+ \n  #https://r-spatial.org/r/2018/10/25/ggplot2-sf.html\n  annotation_scale(location = \"bl\", width_hint = 0.5)+\n  annotation_north_arrow(location = \"bl\", which_north = \"true\", \n                         pad_x = unit(0.15, \"in\"), pad_y = unit(0.25, \"in\"),\n                         style = north_arrow_fancy_orienteering)+\n  theme_minimal()+\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"darkgray\"),\n    legend.key = element_rect(fill = \"lightgrey\", color = NA),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1)\n  )+\n  scale_color_manual(name=\"User type\",\n                     values=c(Casual=\"red\", Members=\"blue\", Station=\"black\"))+\n  scale_fill_manual(name=\"Land Use\",\n                    values=c(commercial=\"yellow\", parks=\"green\"))+\n  \n  labs(title = \"Location of most popular docking stations\",\n       subtitle = \"50 most popular, per user type\", \n       caption = \"Cyclistic's dataset (April 2021-Mars 2022) + OSM data. \\t author: E. Narro\")\n\n\n\n\n\n\nShow code\n\nggmap(ggmap = station_map_1)+\n  geom_sf (data = sf_commercial_area,\n           inherit.aes = FALSE,\n           aes(fill = \"commercial\"),\n           color = \"yellow\",\n           alpha = 1)+\n  geom_sf (data = sf_park,\n           inherit.aes = FALSE,\n           aes(fill = \"parks\"),\n           color = \"green\",\n           alpha = 1)+\n  geom_point(data = df_stations,\n             aes(x = lng,\n                 y= lat,\n                 color = \"Station\"),\n             size=1,\n             fill=\"black\",\n             alpha = .5,\n             shape = 20)+\n  geom_point(data = df_stations_start_members,\n             aes(x = lng,\n                 y= lat,\n                 color = \"Members\",\n                 size = count_stations),\n             alpha = 1,\n             shape = 23)+\n  geom_point (data = df_stations_start_casual,\n              aes(x = lng,\n                  y= lat,\n                  color = \"Casual\",\n                  size = count_stations),\n              alpha = 1,\n              shape = 21)+ \n  #https://r-spatial.org/r/2018/10/25/ggplot2-sf.html\n  annotation_scale(location = \"bl\", width_hint = 0.5)+\n  annotation_north_arrow(location = \"bl\", which_north = \"true\", \n                         pad_x = unit(0.15, \"in\"), pad_y = unit(0.25, \"in\"),\n                         style = north_arrow_fancy_orienteering)+\n  theme_minimal()+\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"darkgray\"),\n    legend.key = element_rect(fill = \"lightgrey\", color = NA),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1)\n  )+\n  scale_color_manual(name=\"User type\",\n                     values=c(Casual=\"red\", Members=\"blue\", Station=\"black\"))+\n  scale_fill_manual(name=\"Land Use\",\n                    values=c(commercial=\"yellow\", parks=\"green\"))+\n  \n  labs(title = \"Location of most popular docking stations\",\n       subtitle = \"50 most popular, per user type - Downtown view\", \n       caption = \"Cyclistic's dataset (April 2021-Mars 2022) + OSM data. \\t author: E. Narro\")\n\n\n\n\nAs we can see, the most popular stations are almost all located in a\nvery small part of the area covered by the network, and there seems to\nbe very small differences between casual users and members\nMost of the most popular docking stations are located in the Near\nNorth Side distric and the Loop district.\nThis is a very visited place and has the “Magnificent Mile” which is a\nvery popular leisure area, with lots of dining places, a lot of company\nbuildings and government agencies, and a lot of University\nbuildings.\nA notable exception to this would be 3 specific Docking stations that\nare popular among members. They are located near University of Chicago\nand University of Illinois Chicago. So we can state that probably a lot\nof members are University students.\nThis does not tell us, however, where users come from or go to, or if\nthere is a difference between them.\nRides by frequence\nIn order to have a better idea of riders, we also want to see if\nthere is a difference between casual users and members in the routes\nthey drive.\nFor this, we have grouped rides that go from one station to a\ndifferent one (by removing rides that do not start or end in a docking\nstation, as well as rides that start and end in the same place) and then\ngroup the data by single rides. This has been done for members and for\ncasual users separately. After that, we have plotted the rides with more\nthan 100 and with more than 1000 occurrences.\n\n\nShow code\n\n#df_path\ndf_path_members <-df_trips %>%\n  filter(ride_distance!=0)%>%\n  filter(start_station_id != \"\")%>%\n  filter(end_station_id != \"\")%>%\n  filter(user == \"Member User\") %>%\n  select(start_station_id, end_station_id) %>%\n  group_by(start_station_id, end_station_id)%>%\n  summarise(count_stations= n())%>%\n  arrange(desc(count_stations))\nnum_rows = nrow(df_path_members)\nID <- c(1:num_rows)\ndf_path_members <- cbind(\"ID\" = ID , df_path_members)\n\ndf_path_members_bis <- df_path_members[,c(1, 3, 4)]\ndf_path_members <- df_path_members[,c(1, 2, 4)]\n\ncolnames(df_path_members)[2] <- \"id_station\"\ncolnames(df_path_members_bis)[2] <- \"id_station\"\n\ndf_path_members <- rbind(df_path_members, df_path_members_bis)\ndf_path_members <- df_path_members[order(df_path_members$ID, decreasing = FALSE),]\ndf_path_members <- left_join(df_path_members, \n                                     df_stations, \n                                     by = c(\"id_station\" = \"id_original\"))\n\n#Same for casual users:\n#df_path\ndf_path_casual <-df_trips %>%\n  filter(ride_distance!=0)%>%\n  filter(start_station_id != \"\")%>%\n  filter(end_station_id != \"\")%>%\n  filter(user == \"Casual User\") %>%\n  select(start_station_id, end_station_id) %>%\n  group_by(start_station_id, end_station_id)%>%\n  summarise(count_stations= n())%>%\n  arrange(desc(count_stations))\nnum_rows = nrow(df_path_casual)\nID <- c(1:num_rows)\ndf_path_casual <- cbind(\"ID\" = ID , df_path_casual)\n\ndf_path_casual_bis <- df_path_casual[,c(1, 3, 4)]\ndf_path_casual <- df_path_casual[,c(1, 2, 4)]\n\ncolnames(df_path_casual)[2] <- \"id_station\"\ncolnames(df_path_casual_bis)[2] <- \"id_station\"\n\ndf_path_casual <- rbind(df_path_casual, df_path_casual_bis)\ndf_path_casual <- df_path_casual[order(df_path_casual$ID, decreasing = FALSE),]\ndf_path_casual <- left_join(df_path_casual, \n                             df_stations, \n                             by = c(\"id_station\" = \"id_original\"))\n\ndf_path_casual_100 <- df_path_casual %>%\n  filter(count_stations>100)\ndf_path_members_100 <- df_path_members %>%\n  filter(count_stations>100)\n\ndf_path_casual_1000 <- df_path_casual %>%\n  filter(count_stations>1000)\ndf_path_members_1000 <- df_path_members %>%\n  filter(count_stations>1000)\n\n#To get geometry, there is probably a better way...\nq_nothing <- getbb(\"Chicago\") %>%\n  opq() %>%\n  add_osm_feature(\"landuse\", \"vineyard\")\nosm_nothing <- osmdata_sf(q_nothing)\nst_crs(osm_nothing$osm_polygons) <- 4326\nsf_nothing <- osm_nothing$osm_polygon\n\n\n\n\n\nShow code\n\n#Over 1000\nggmap(ggmap = station_map_1)+\n  geom_sf (data = sf_nothing,\n           inherit.aes = FALSE,\n           aes())+\n  geom_path(data = df_path_casual_1000,\n            aes(x = lng,\n                y = lat,\n                group = ID,\n                color = \"Casual\"\n                ),\n            size = 1)+\n  geom_path(data = df_path_members_1000,\n            aes(x = lng,\n                y = lat,\n                group = ID,\n                color = \"Member\"\n                ),\n            size = 1)+\n  #https://r-spatial.org/r/2018/10/25/ggplot2-sf.html\n  annotation_scale(location = \"bl\", width_hint = 0.5)+\n  annotation_north_arrow(location = \"bl\", which_north = \"true\", \n                         pad_x = unit(0.15, \"in\"), pad_y = unit(0.25, \"in\"),\n                         style = north_arrow_fancy_orienteering)+\n  theme_minimal()+\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"darkgray\"),\n    legend.key = element_rect(fill = \"lightgrey\", color = NA),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1)\n  )+\n  scale_color_manual(name=\"User type\",\n                     values=c(Casual=\"red\", Member=\"blue\"))+\n  labs(title = \"Rides with over 1000 occurrencies\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022 cumulative\", \n       caption = \"Cyclistic's dataset (April 2021-Mars 2022) + OSM data. \\t author: E. Narro\")\n\n\n\n\n\n\nShow code\n\nggmap(ggmap = station_map_1)+\n  geom_sf (data = sf_nothing,\n           inherit.aes = FALSE,\n           aes())+\n  geom_path(data = df_path_members_100,\n            aes(x = lng,\n                y = lat,\n                group = ID,\n                color = \"Member\",\n            ),\n            size = 0.2)+\n  geom_path(data = df_path_casual_100,\n            aes(x = lng,\n                y = lat,\n                group = ID,\n                color = \"Casual\",\n            ),\n            size = 0.2)+\n  #https://r-spatial.org/r/2018/10/25/ggplot2-sf.html\n  annotation_scale(location = \"bl\", width_hint = 0.5)+\n  annotation_north_arrow(location = \"bl\", which_north = \"true\", \n                         pad_x = unit(0.15, \"in\"), pad_y = unit(0.25, \"in\"),\n                         style = north_arrow_fancy_orienteering)+\n  theme_minimal()+\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"darkgray\"),\n    legend.key = element_rect(fill = \"lightgrey\", color = NA),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1)\n  )+\n  scale_color_manual(name=\"User type\",\n                     values=c(Casual=\"red\", Member=\"blue\"))+\n  labs(title = \"Rides with over 100 occurrencies\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022 cumulative\", \n       caption = \"Cyclistic's dataset (April 2021-Mars 2022) + OSM data. \\t author: E. Narro\")\n\n\n\n\nAs we can see, the most successful rides happen in the Chicago city\ncenter.\nCausal rides seem to be more touristic-oriented.\nMost common members area covers all the most common casual rider’s\narea and is larger. On top of the busiest areas of Chicago, the area\nexpands within Universities, some residential areas to the North and an\narea around Chinatown and the McCormick Place convention center.\nWith all these findings, if we need to make new marketing campaigns,\nwe could suggest making them in downtown area, around the Magnificent\nMile or around the parks in the Loop district area.\nIn order to develop the service further, the company could focus on\nother areas of leisure (like the zoo for example) or other colleges /\nUniversities located more towards the West of the town, but the density\nof things to do around those areas seems way lower than the East\nArea.\nSo probably, if the goal is to get more casual users to subscribe,\noffering a better experience within the downtown area seems to be the\nway to go.\nProduct\nspecific differences between members and casual users\nThere are 2 kinds of bikes users can rent, electric and classic.\nDocked bikes are electric bikes that need to be docked and can only be\nundocked by paying in a kiosk, so they are only referenced for casual\nusers. Electric bikes can be docked or left in the street. Classic bikes\nneed to be docked all the time.\nThe following table gives us the proportions for each product\ndepending on the type of user:\n\n\nShow code\n\nprint(ctable(df_trips$user, df_trips$rideable_type), method = \"render\")\n\n\n\nCross-Tabulation, Row Proportions\nuser * rideable_type\nData Frame: df_trips\n\nrideable_type\n\n\nuser\n\nClassic\nElectric\nDocked\nTotal\n\nMember User\n\n1962194\n(\n62.9%\n)\n1158628\n(\n37.1%\n)\n0\n(\n0.0%\n)\n3120822\n(\n100.0%\n)\n\nCasual User\n\n1240708\n(\n49.5%\n)\n964780\n(\n38.5%\n)\n300384\n(\n12.0%\n)\n2505872\n(\n100.0%\n)\n\nTotal\n\n3202902\n(\n56.9%\n)\n2123408\n(\n37.7%\n)\n300384\n(\n5.3%\n)\n5626694\n(\n100.0%\n)\nGenerated by summarytools 1.0.0 (R version 4.2.0)2022-05-11\n\n\nMembers use classic bikes most of the time (63%). They also use\nelectric bikes in a significant amount. When members use electric bikes,\nthey have to pay from minute 1 (but they have a better price). So this\ncould lead to members preferring using classic bikes that have no extra\ncost. It could also be the other way around, people tending to subscribe\nmore when they are classic bike users since the benefits could be more\nattractive.\nCasual users use evenly classic or electric bikes. They tend to make\nlonger distances so maybe that is a reason. Docked electric\nbikes account for 12% of the rides, for casual users, which is a\nsignificant amount of customers not even using the phone\napp.\nIt could be a good idea to make more users install the app and even\ntest the membership. Maybe offering free special membership for a month,\nor any other special offer that could make people get and use\nthe application. We can suppose that if people use the\napplication they are a step closer to subscribing.\nWe can try to see if the choice of electric over classic is\ninfluenced by season or day of the week:\n\n\nShow code\n\nggplot(data=df_trips)+\n  geom_bar(mapping=aes(x= week_day, \n                       fill = rideable_type\n  ))+\n  scale_fill_brewer(palette = \"Set3\")+\n  theme_dark()+\n  labs(title = \"Type of bike per day of the week\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022 cumulative\",\n       caption = \"April 2021 - Mars 2022 \\t E. Narro\",\n       x = \"Day of the week\",\n       y= \"Number of rides in a year (x 1000)\",\n       fill = \"User type\"\n  )+\n  #https://stackoverflow.com/questions/44600061/ggplot-scales-unit-format-thousands-one-decimal-place\n  scale_y_continuous(labels = scales::unit_format(\n    unit = \"k\", \n    scale = 1e-3,\n    accuracy = 1))+\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"lightgrey\"),\n    legend.key = element_rect(fill = \"white\", color = NA),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1)\n  )+\n  facet_grid(~user)\n\n\n\n\n\n\nShow code\n\nggplot(data=df_trips)+\n  geom_bar(mapping=aes(x= month, \n                       fill = rideable_type\n  ))+\n  scale_fill_brewer(palette = \"Set3\")+\n  theme_dark()+\n  labs(title = \"Type of bike per month\",\n       subtitle = \"Members vs Casual users. April 2021 - Mars 2022 cumulative\",\n       caption = \"April 2021 - Mars 2022 \\t E. Narro\",\n       x = \"Month\",\n       y= \"Number of rides in a year (x 1000)\",\n       fill = \"User type\"\n  )+\n  #https://stackoverflow.com/questions/44600061/ggplot-scales-unit-format-thousands-one-decimal-place\n  scale_y_continuous(labels = scales::unit_format(\n    unit = \"k\", \n    scale = 1e-3,\n    accuracy = 1))+\n  theme(\n    # Change legend background color\n    legend.background = element_rect(fill = \"lightgrey\"),\n    legend.key = element_rect(fill = \"white\", color = NA),\n    panel.border = element_rect(color = \"darkgrey\",\n                                fill = NA,\n                                size = 1)\n  )+\n  facet_grid(~user)\n\n\n\n\nThe distribution does not seem very impacted by seasonality, but it\nlooks like classic bikes have more elasticity in their use, its use\ncompared to electric bikes grows with weekends and hot months.\nConclusion\nMain Findings and guesses\nThe main differences of casual vs member users are:\nRides done by members are 10 times more important than those done by\ncasual users\nMembers do most of the total rides on weekdays, casual users do most\nof the rides on weekends.\nMembers ride less on weekends than on weekdays\nCasual users do not ride that much from November to March\nCasual users make longer rides, sometimes longer than 45 minutes and\nit is extremely rare for members to exceed 45 minutes (or even 35\nminutes)\nMost rides happen in Downtown Chicago, in the East part of the city,\nwhere the skyscrapers and all the big buildings are\nCasual users ride almost exclusively in the very East area of\nChicago, Members expand a little more to surrounding neighborhoods.\nMembers use classic bikes more often (63% of the time), casual users\nare about 50-50\nDuring our analysis, we also guessed the following.\nIt would be interesting to do further research and quantify some\nstatements:\nA fair amount of casual riders are probably tourists, which reduces\nthe possibility of selling memberships.\nSince casual users ride mostly on weekends (2 days out of 7), they\nprobably see subscription less attractive\nSince casual users ride mostly on hot months (7 month out of 12),\nthey probably see subscription less attractive\nThe current pricing system influences how members and casual users\nride: shorter more often rides for members, longer less frequent rides\nfor casual users\nLocation of some rides makes us think that a lot of member users are\nUniversity students (there is a special membership for students\ntoo)\nA big amount of casual users do not even have the app installed\nMain suggestions\nEither extend the maximum riding time with no extra charge for\ncurrent memberships, OR create a new membership with longer time with no\ncharge, with a bit higher price OR create an extra membership plan based\non hours (eg: $240 for 50 hours to do within a year + same extra price\nthan “regular” members for electric bikes – The amounts are to\nillustrate the point)\nCreate a special low-cost subscription for the use of the service in\nthe mornings, maybe oriented to senior citizens\nIn order to convert more casual users to members, make marketing\ncampaigns where those casual users are: around the Magnificent Mile and\nthe parks of the Loop district, during weekends of hot months.\nCreate a special offer to make casual users install and use the\napplication\nPartner with employers so they can offer subscriptions as perks\nFocus on making a better product when used in downtown: partner with\nlocal businesses (restaurants, bars, museums…) to add value to the\nmembership\n\n\n\n",
    "preview": "posts/cyclistic//cyclistic_files/figure-html5/histograms per day-1.png",
    "last_modified": "2022-05-11T10:50:14+02:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to my blog",
    "description": "Welcome to my blog about data analysis and all my other projects! Let me tell you why I created it and how I made it!",
    "author": [
      {
        "name": "Eric Narro",
        "url": "https://enarroied.github.io"
      }
    ],
    "date": "2022-04-29",
    "categories": [
      "R",
      "R studio",
      "rmarkdown",
      "distill"
    ],
    "contents": "\n\nContents\nWhy did I make this blog?\nHow did I create this blog?\nOther learning ressources\n\nWhy did I make this blog?\nI had been thinking about creating a blog to make a portfolio for\nquite some time. As you can find out in my\nAbout page, I have been programming and doing projects since 2018,\nbut the amount of time spent on projects increased over time as well as\nmy will to become a developper and then a data analyst\nWhen I started to create scripts that were really used for my work,\nand even a python plugin for QGis, I began publishing my work on\ngithub.\nI finally created my portfolio while completing the Google\nData Analytics’ Professional Certificates on Coursera.\nThinking further, I also think creating a blog can give me a space\nfor expression, since I enjoy writing and it can also show my written\ncommunication skills.\nWhat I wanted was:\nA static portfolio site, where I could have :\nA simple and clean landing page.\nEasy to find contact information and connexion to my different\nsocial media profiles.\nAn about page, with more information about me, for those who want to\nknow more about how I ended taking this path.\nA resume section, in HTML (plus eventually a pdf\nversion to download too).\nA blog section to wrtite about my projects, data analysis, etc.\nA project section with links to some of my projects posted on github\nor other platforms.\n\nTo use Rstudio to have its own project folder, with git configured\nto make the workflow easier (I rather spend more time at first, take the\nrisk of learning something, and then have a smooth process).\nTo publish and host on Github pages, basically to not have it all\nspread across too many places.\nI use Ubuntu as desktop OS, so it has to be fine with that too.\nHow did I create this blog?\nThis blog was created using the following stack:\nRmarkdown: R markdown is very similar to markdown.\nHaving previous experience with \\(\\LaTeX{}\\), this is an easy way to edit\ndocuments. Markdown is very used to document code so I thought it could\nbe a good option.\nR studio: it is an IDE widely used to write R code.\nSince I created this blog to post my first project done with R, I\nthought it would be a good idea to access all the content from “the same\nwindow”. It also helps me get more familiar with working with the tool\nand with git (with github).\ndistill and rmarkdown packages: An R package to\nmake simple blogs. I considered making it with the blogdown\npackage using Hugo, but the documentation about it was not clear to me\n(and I wanted to host and publish my blog on Github and not on\nNetlify).\nR and other R libraries: Since this is a blog about\ndata analysis, I have used R and several libraries to clean, prepare,\nanalyze and create visualizations. Since I am mostly familiar with\npython and jupyter notebooks, I wll probably integrate python projects\ntoo. And any other tool needed for the process.\nMy RStudio environment while I work on my\nblog! (with a mistake in my website URL!)Since all this environment is pretty new to me (I am again, more\nfamiliar with python and working with Visual Studio Code or Jupyter\nNotebooks) I had to learn it all from scratch. I looked for a lot of\ndocumentation on the internet, I tried blogdown but I did not feel\nconfortable with it, I looked at distill and I found this\npost from Danielle Brantley that led me to choose the distill\npackage.\nSo I built my blog adding the content and modifying the yaml file,\nusual stuff. The main modifications were the following:\nLanding page / index.html: I wanted a simple and\nintuitive landing page, a simple picture of me, some basic information\nand an easy way to find the content. The distill default page does not\ncome with this. After a lot of research, I found the\npostcards package documented on the distillery\nblog. It allows to make exactly what I wanted with just little\nmodification of the yml file.\nCSS: I have some basic CSS knowledge, but to be\nhonnest, styling is not my cup of tea, so I got 2 different files that I\nput together and modified a little. The code looks like a monster (with\na few !important properties ), but the result is (I think)\nnot so bad.\nSo I first used the postcards.css from the postcard\nlayout that I modified a little. I mostly changed the color scheme and\nadded background color to code chunks and to tables, to make them stand\nout and adding some overflow: auto so tables and code\nblocks do not take too much space on the page. You can find the original\nfile in Alisson\nPremanes Hill’s github\nI then saw Michael Clark’s\nblog, and I copy-pasted some of his\nCSS file modifying the color scheme to match mine.\n\nOther “stuff”: Surfing the web in the quest for\nvarious distill-related informations, I found this\narticle by Zoe Turner, that references this other blog\npost by Shamindra Shrotiya. I was not specifically looking for all\nthis at first, but adding functionality to the blog is always nice (and\nfun), plus it was probably the easiest and painless part to all the\nprocess. All the steps are documented in Shamindra’s blog post, so check\nit out. This is what I added do my blog following his steps:\nI created a Disqus account, and now you can leave comments on my\nblog posts, so feel free to comment!\nI added the repository url to my _site.yaml file, so\nnow people can suggest changes to my files directly on github. I also\nadded the RSS feed link because: Why not?\nI added a Google Analytics tracking option. I did not think about it\nat first but I feels so obvious now that I should be able to know how\nmany views my blog has… Plus it is data I may one day analyze!\nThe options to share blog posts on social media were already added\nfor twitter and linkedIn, but adding all this new options made me want\nto add more sharing options, like linkedIn or Pinterest (feel free to\npin any awesome chart!).\n\nThen I created a CV tab were you can find my resume, in pdf\nformat.\nOther learning ressources\nThe resources mentioned above have been major inspirations, often\nwith copy-paste to build my website. I also used the following\nresources:\nRstudio\ndocumentation about distill package\nAn\nintro to distill by rstudio4edu\nAnd really, many others, so thank you again Google.\n\n\n\n",
    "preview": "posts/welcome/welcome_files/figure_html5/rstudio.png",
    "last_modified": "2022-05-11T21:52:33+02:00",
    "input_file": {},
    "preview_width": 1356,
    "preview_height": 707
  }
]
